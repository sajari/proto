syntax = "proto3";

package sajari.autocomplete.v2;

import "google/protobuf/empty.proto";

option go_package = "code.sajari.com/protogen-go/sajari/autocomplete/v2;autocompletepb";

// Control defines methods for creating and deleting autocomplete models.
service Admin {
  // Create a new autocomplete model.
  rpc CreateModel (CreateModelRequest) returns (CreateModelResponse);
  // Delete an existing model.
  rpc DeleteModel (DeleteModelRequest) returns (google.protobuf.Empty);
}

// Query defines methods for quering an autocomplete model.
service Query {
  // Autocomplete a phrase. Potentially also fix spelling mistakes.
  rpc AutoComplete (AutoCompleteRequest) returns (AutoCompleteResponse);

  // SuggestSpellings for a list of words.
  rpc SuggestSpellings (SuggestSpellingsRequest) returns (SuggestSpellingsResponse);
}

// Train defines methods for training autocomplete models.
service Train {
  // Add words to the model to assist in detecting spelling mistakes.
  rpc AddCorpus (AddCorpusRequest) returns (google.protobuf.Empty);
  // Set frequency for words in the model.
  rpc SetCorpus (SetCorpusRequest) returns (google.protobuf.Empty);

  // Add a query to the model to assist with query popularity prediction.
  rpc AddQueryFrequency (AddQueryFrequencyRequest) returns (google.protobuf.Empty);
  // Set the frequency for a query.
  rpc SetQueryFrequency (SetQueryFrequencyRequest) returns (google.protobuf.Empty);
}

// Model is an autocomplete model.
message Model {
  // Name of the model.
  string name = 1;
}

// Frequency for a word, n-gram or query.
message Frequency {
  // The source
  string label = 1;
  // Number of times counted for a label.
  int64 count = 2;
}

// CreateModelRequest contains details of the model to create.
message CreateModelRequest {
   // Model to create.
   Model model = 1;
}

// CreateModelResponse contains model that was created.
message CreateModelResponse {
  // Model that was created.
  Model model = 1;
}

message DeleteModelRequest {
  // Model to delete.
  Model model = 1;
}

// AddCorpusRequest contains words to add to the model to assist with
// detecting detecting spelling mistakes.
message AddCorpusRequest {
  // Model to train.
  Model model = 1;
  // Source of the terms.
  string label = 2;
  // The words to train the corpus with. These should be correctly
  // spelt to avoid autocorrecting to misspellings.
  repeated string words = 3;
  // The training options.
  repeated AddCorpusOption options = 4;

  // The options used for add corpus.
  message AddCorpusOption {
    oneof opt {
      // Only unigrams will be recorded for the words.
      bool only_unigrams = 1;
    }
  }
}

// SetCorpusRequest contains words to set in the model.
message SetCorpusRequest {
  // Model to train.
  Model model = 1;
  // Source of the terms.
  string label = 2;
  // The words to train the corpus with.
  repeated string words = 3;
  // If true, the words will be as is and not expanded into unigrams,bigrams and trigrams.
  bool flat = 4;
}

// AddQueryRequest to assist with query popularity prediction.
message AddQueryFrequencyRequest {
  // Model to add query to.
  Model model = 1;
  // the source of the query.
  string label = 2;
  // The query is broken into terms. Typically this would use spaces
  // as delimiters, but it is not restricted to spaces for language flexibility.
  repeated string query = 3;
  // Number of times to add to the query count for the given label.
  int64 count = 4;
  // The training options.
  repeated AddQueryOption options = 5;

  // The options used for adding queries.
  message AddQueryOption {
    oneof opt {
      // each word in the query must exist.
      bool words_must_exist = 1;
    }
  }
}

// SetQueryFrequencyResponse sets the frequency for a query.
message SetQueryFrequencyRequest {
  // Model to use.
  Model model = 1;
  // Source of the query.
  string label = 2;
  // Query to set.
  repeated string query = 3;
  // Number of times the query is counted for a given label.
  int64 count = 4;
}

// AutoCompleteRequest is a query to be autocompleted.
message AutoCompleteRequest {
  // Model to train.
  Model model = 1;

  // Words representing the input to complete.
  repeated string words = 2;

  // The configuration options for spelling suggestions.
  repeated AutoCompleteOption options = 3;

  // The options used for spelling suggestions.
  message AutoCompleteOption {
    oneof opt {
      // Used to determine whether process the autocomplete request.
      SkipOption skip_option = 1;
    }
  }
}

// AutoCompleteResponse is an ordered list of autocompleted phrases in response
// to an AutoCompleteRequest.
message AutoCompleteResponse {
  message Suggestion {
    // Words representing the suggestion.
    repeated string words = 1;
    // Weight of the suggestion.
    double weight = 2;
  }

  // Potential autocompletes in order of most likely to least likely.
  repeated Suggestion suggestions = 1;
}

message SuggestSpellingsRequest {
  // Model to use.
  Model model = 1;

  // List of words to correct (in context).
  repeated string words = 2;

  // The configuration options for spelling suggestions.
  repeated SuggestOption options = 3;

  // The options used for spelling suggestions.
  message SuggestOption {
    oneof opt {
      // Sets the the maximum number of word suggestions returned to this value.
      int32 word_limit = 1;
      // Used to evaluate suggestions.
      ScoreOption score_option = 2;
      // Used to determine whether to evaluate suggestions.
      SkipOption skip_option = 3;
      // Influences a word suggestion score.
      LabelScorer word_scorer = 4;
      // Influences a phrase suggestion score.
      LabelScorer phrase_scorer = 5;
    }
  }

  // Allows a score to be weighted according to label.
  message LabelScorer {
    // Mapping of label to weight.
    map<string, double> weights = 1;
  }

  // Score options which boost the score of a suggestion.
  message ScoreOption {
    // Checks for an adjacent swap which would otherwise register
    // as distance 2 (standard Leveshtein), updating them to distance 1.
    message AdjacentSwap {
    }

    // ConsecutiveRepeat looks for mistakes due to repeated letters (i.e.
    // where the input has a single letter that should be double, or vice
    // versa).
    message ConsecutiveRepeat {
      // scores contains the score to add for distance 0, 1, 2 and so on.
      repeated double scores = 1;
    }

    // FullPrefix returns a score if the suggestion is contained in the prefix of word.
    message FullPrefix {
      // scores contains the score to add for edit distance 0, 1, 2.
      repeated double scores = 1;
    }

    // FullSuffix returns a score if the suggestion is contained in the suffix of the word.
    message FullSuffix {
      // scores contains the score to add for edit distance 0, 1, 2.
      repeated double scores = 1;
    }

    // Levenshtein configures the score attributed to different edit distances.
    message Levenshtein {
      // scores contains the score to add for edit distance 0, 1, 2.
      repeated double scores = 1;
    }

    // LimitDistance bounds the allowed edit distance based on the size of the input word.
    message LimitDistance {
      // Maximum length of the suggestion suggested word.
      int32 max_word_size = 1;
      // Maximum edit distance the suggested word can have.
      int32 max_distance = 2;
    }

    // Prefix adds scoring to suggestions if they match prefixes.
    message Prefix {
      // scores to add for each prefix character that matches with the suggestion.
      repeated double scores = 1;
    }

    // VowelSwap returns score if a difference is a vowel swap.
    message VowelSwap {
      // score is the score to add to the suggestion.
      double score = 1;
    }

    // Clears all default score options.
    message Clear {
    }

    oneof score_option {
      AdjacentSwap adjacent_swap = 1;
      ConsecutiveRepeat consecutive_repeat = 2;
      FullPrefix full_prefix = 3;
      FullSuffix full_suffix = 4;
      Levenshtein levenshtein = 5;
      LimitDistance limit_distance = 6;
      Prefix prefix = 7;
      VowelSwap vowel_swap = 8;
      Clear clear = 9;
    }
  }
}

message SuggestSpellingsResponse {
  message WordSuggestions {
    message WordScore {
      string word = 1;
      double score = 2;
    }
    repeated WordScore word_scores = 1;
  }

  message PhraseSuggestion {
    repeated string words = 1;
    double score = 2;
  }

  // Spelling suggestions for the words.
  repeated WordSuggestions word_suggestions = 1;

  // Context-based suggestions for the words
  // formed into phrases.
  repeated PhraseSuggestion phrase_suggestions = 2;
}

// Determines whether the request should be porcessed.
message SkipOption {
  // Skip evaluation based on the ngrams located within a label.
  message SkipLabel {
    // Source of the words.
    string label = 1;
  }

  oneof skip_option {
      SkipLabel skip_label = 1;
  }
}